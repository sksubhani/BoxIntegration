/**
* @author: Subhani Shaik
*/
package com.subhani.standalone;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;

import com.box.sdk.BoxDeveloperEditionAPIConnection;
import com.box.sdk.BoxFolder;
import com.box.sdk.BoxItem;
import com.box.sdk.BoxUser;
import com.box.sdk.EncryptionAlgorithm;
import com.box.sdk.IAccessTokenCache;
import com.box.sdk.InMemoryLRUAccessTokenCache;
import com.box.sdk.JWTEncryptionPreferences;

public class UploadFileToBox {

	private static final String CLIENT_ID = ""; // Get it from the application properties.
    private static final String CLIENT_SECRET = ""; // Get it from the application properties.
    private static final String ENTERPRISE_ID = ""; // Not required unless your code managing the users / apps. Otherwise, get it fro properties.
    private static final String PUBLIC_KEY_ID = ""; // Get it from the application properties. This is created when we added public key to the app.
    private static final String PRIVATE_KEY_FILE = ""; // Private key file path we created using Openssl and cygwin.
    private static final String PRIVATE_KEY_PASSWORD = ""; // The pass phrase we used (secret word) when creating the private key file.
    private static final String APP_USER_NAME = ""; // Box User ID / email id with which you logged into the application
    private static final int MAX_CACHE_ENTRIES = 100;
    private static final int MAX_DEPTH = 1;
    
	public UploadFileToBox() {
		// TODO Auto-generated constructor stub
	}

	public static void main(String[] args) throws IOException {

        String privateKey = new String(Files.readAllBytes(Paths.get(PRIVATE_KEY_FILE)));

        JWTEncryptionPreferences encryptionPref = new JWTEncryptionPreferences();
        encryptionPref.setPublicKeyID(PUBLIC_KEY_ID);
        encryptionPref.setPrivateKey(privateKey);
        encryptionPref.setPrivateKeyPassword(PRIVATE_KEY_PASSWORD);
        encryptionPref.setEncryptionAlgorithm(EncryptionAlgorithm.RSA_SHA_256);

        //It is a best practice to use an access token cache to prevent unneeded requests to Box for access tokens.
        //For production applications it is recommended to use a distributed cache like Memcached or Redis, and to
        //implement IAccessTokenCache to store and retrieve access tokens appropriately for your environment.
        IAccessTokenCache accessTokenCache = new InMemoryLRUAccessTokenCache(MAX_CACHE_ENTRIES);

        BoxDeveloperEditionAPIConnection api = BoxDeveloperEditionAPIConnection.getAppUserConnection(APP_USER_NAME, CLIENT_ID,
                CLIENT_SECRET, encryptionPref, accessTokenCache);

        BoxUser.Info userInfo = BoxUser.getCurrentUser(api).getInfo();
        System.out.format("Welcome, %s!\n\n", userInfo.getName());

        BoxFolder rootFolder = BoxFolder.getRootFolder(api);

        listFolder(rootFolder, 0);
        
        System.out.println("API Key: " + api.getAccessToken());
    }

    private static void listFolder(BoxFolder folder, int depth) {
        for (BoxItem.Info itemInfo : folder) {
            String indent = "";
            for (int i = 0; i < depth; i++) {
                indent += "    ";
            }

            System.out.println(indent + itemInfo.getName());
            if (itemInfo instanceof BoxFolder.Info) {
                BoxFolder childFolder = (BoxFolder) itemInfo.getResource();
                if (depth < MAX_DEPTH) {
                    listFolder(childFolder, depth + 1);
                }
            }
        }
    }

}
